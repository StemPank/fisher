import re
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from gui.agent.agent_tab import start_agent_from_bot, stop_agent_from_bot, get_list_agent

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    @bot.message_handler(commands=['status'])
    def send_status(message):
        bot.send_message(message.chat.id, "üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    @bot.message_handler(commands=['help'])
    def send_help(message):
        bot.send_message(message.chat.id, "‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n/help - –ü–æ–º–æ—â—å")



    # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤
    @bot.message_handler(commands=['agents'])
    @bot.message_handler(func=lambda message: message.text.lower() in ["—Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤", "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"])
    def send_agent_list(message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫)"""
        try:
            res = get_list_agent()

            if not res:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            if res:
                agent_list = "\n".join(f"üìå {name}" for name in res)
                bot.send_message(message.chat.id, f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:\n{agent_list}")

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")

    @bot.message_handler(func=lambda message: "–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞" in message.text.lower())
    def handle_agent_start(message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = message.text.lower().replace("–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", "").strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞ (—Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
        match = re.match(r"(\w+)", text)
        
        if match:
            agent_name = match.group(1)

            res = start_agent_from_bot(agent_name)
            if res == False:
                bot.send_message(message.chat.id, f"–ê–≥–µ–Ω—Ç '{agent_name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –∞–≥–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
                return

            bot.send_message(message.chat.id, f"–ê–≥–µ–Ω—Ç '{agent_name}' –∑–∞–ø—É—â–µ–Ω! üöÄ")
        else:
            bot.send_message(message.chat.id, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–º—è –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ agent1'.")

    @bot.message_handler(commands=['startagent'])
    def send_start_buttons(message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        agent_list = get_list_agent()
        
        if not agent_list:
            bot.send_message(message.chat.id, "üîç –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.")
            return

        markup = InlineKeyboardMarkup()
        for agent in agent_list:
            markup.add(InlineKeyboardButton(agent, callback_data=f"start_agent:{agent}"))
        
        bot.send_message(message.chat.id, "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("start_agent:"))
    def start_agent_callback(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫."""
        agent_name = call.data.split(":")[1]
        
        try:
            start_agent_from_bot(agent_name)
            bot.send_message(call.message.chat.id, f"‚úÖ –ê–≥–µ–Ω—Ç **{agent_name}** –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")

    @bot.message_handler(commands=['stopagent'])
    def send_start_buttons(message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        agent_list = get_list_agent()
        
        if not agent_list:
            bot.send_message(message.chat.id, "üîç –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.")
            return

        markup = InlineKeyboardMarkup()
        for agent in agent_list:
            markup.add(InlineKeyboardButton(agent, callback_data=f"stop_agent:{agent}"))
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("stop_agent:"))
    def start_agent_callback(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫."""
        agent_name = call.data.split(":")[1]
        
        try:
            stop_agent_from_bot(agent_name)
            bot.send_message(call.message.chat.id, f"‚úÖ –ê–≥–µ–Ω—Ç **{agent_name}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")
